---
import { languageFlags, languages } from '@i18n/ui'
import { getLangFromUrl, getRouteFromUrl, useTranslations } from '@i18n/utils'
import { cn } from "@lib/utils"

const { pathname } = Astro.url
const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const subpath = pathname.match(/[^/]+/g)

const route = getRouteFromUrl(Astro.url)

// Define links using translations
const LINKS = [
  { 
    TEXT: t('nav.home'), 
    HREF: `/${lang}/`, 
  },
  { 
    TEXT: t('nav.work'), 
    HREF: `/${lang}/work`, 
  },
  { 
    TEXT: t('nav.blog'), 
    HREF: `/${lang}/blog`, 
  },
  { 
    TEXT: t('nav.projects'), 
    HREF: `/${lang}/projects`, 
  },
  {
    TEXT: t('nav.cv'),
    HREF: "https://drive.google.com/file/d/19pqHEiFgfk3KVx_rZrWjyfyNAXi1a0jI/view?usp=sharing",
    EXTERNAL: true,
  },
]
---

<div id="drawer" class="fixed inset-0 h-0 z-40 overflow-hidden flex flex-col items-center justify-center md:hidden bg-neutral-100 dark:bg-neutral-900 transition-[height] duration-300 ease-in-out">
  <nav class="flex flex-col items-center space-y-2">
    {
      LINKS.map((LINK) => (
        <a href={LINK.HREF} target={LINK.EXTERNAL ? "_blank" : ""} class={cn("flex items-center justify-center px-3 py-1 rounded-full", "text-current hover:text-black dark:hover:text-white", "hover:bg-black/5 dark:hover:bg-white/20", "transition-colors duration-300 ease-in-out", pathname === LINK.HREF || "/" + subpath?.[0] === LINK.HREF ? "pointer-events-none bg-black dark:bg-white text-white dark:text-black" : "")}>
          {LINK.TEXT}
        </a>
      ))
    }
  </nav>

  <div class="flex gap-1 mt-5">
    <a href={`/${lang}/search`} aria-label={t('a11y.search')} class={cn("size-9 rounded-full p-2 items-center justify-center bg-transparent hover:bg-black/5 dark:hover:bg-white/20 stroke-current hover:stroke-black hover:dark:stroke-white border border-black/10 dark:border-white/25 transition-colors duration-300 ease-in-out", pathname === `/${lang}/search` || "/" + subpath?.[0] === "search" ? "pointer-events-none bg-black dark:bg-white text-white dark:text-black" : "")}>
      <svg class="size-full">
        <use href="/ui.svg#search"></use>
      </svg>
    </a>

    <button id="drawer-theme-button" aria-label={t('a11y.theme')} class="size-9 rounded-full p-2 items-center justify-center bg-transparent hover:bg-black/5 dark:hover:bg-white/20 stroke-current hover:stroke-black hover:dark:stroke-white border border-black/10 dark:border-white/25 transition-colors duration-300 ease-in-out">
      <svg class="block dark:hidden size-full">
        <use href="/ui.svg#sun"></use>
      </svg>
      <svg class="hidden dark:block size-full">
        <use href="/ui.svg#moon"></use>
      </svg>
    </button>

  <div class="relative">
    <button
    id="drawer-language-button"
    aria-label={t('a11y.language')}
    class={cn(
      "size-9 rounded-full p-1.5 items-center justify-center",
      "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
      "border border-black/10 dark:border-white/25",
      "transition-colors duration-300 ease-in-out"
    )}
    >
    <svg class="size-full">
      <use href={`/ui.svg#${languageFlags[lang]}`}></use>
    </svg>
    </button>
    
    <div id="drawer-language-dropdown" class="hidden absolute top-full mt-2 right-0 bg-neutral-50 dark:bg-neutral-800 rounded-lg shadow-lg border border-black/10 dark:border-white/10 z-50">
    <div class="p-1 flex flex-col">
      {Object.entries(languages).map(([langCode, label]) => (
      <a 
        href={`/${langCode}/${route || ''}`} 
        class={cn(
        "flex items-center gap-2 px-3 py-2 rounded",
        "hover:bg-black/5 dark:hover:bg-white/10",
        "transition-colors duration-200",
        langCode === lang ? "font-bold" : ""
        )}
      >
        <svg class="size-5">
        <use href={`/ui.svg#${languageFlags[langCode]}`}></use>
        </svg>
        <span>{label}</span>
      </a>
      ))}
    </div>
    </div>
  </div>
</div>

<style>
  #drawer.open {
    @apply h-full;
  }
</style>

<script is:inline>
  // Language dropdown toggle for drawer
  function toggleDrawerLanguageDropdown() {
    const dropdown = document.getElementById("drawer-language-dropdown")
    dropdown?.classList.toggle("hidden")
  }

  function initializeDrawerLanguageButton() {
    const languageButton = document.getElementById("drawer-language-button")
    languageButton?.addEventListener("click", toggleDrawerLanguageDropdown)
  }

  document.addEventListener("astro:after-swap", () => {
    initializeDrawerLanguageButton()
  })
  
  initializeDrawerLanguageButton()
</script>