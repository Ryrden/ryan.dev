---
import { getLangFromUrl, useTranslations, getRouteFromUrl } from '@i18n/utils'
import { languageFlags, languages } from '@i18n/ui'
import { cn } from "@lib/utils"
import Container from "@components/Container.astro"

const { pathname } = Astro.url
const lang = getLangFromUrl(Astro.url)
const route = getRouteFromUrl(Astro.url)
const t = useTranslations(lang)
const subpath = pathname.match(/[^/]+/g)

// Define links using translations
const LINKS = [
  { 
    TEXT: t('nav.home'), 
    HREF: `/${lang}/`, 
  },
  { 
    TEXT: t('nav.work'), 
    HREF: `/${lang}/work`, 
  },
  { 
    TEXT: t('nav.blog'), 
    HREF: `/${lang}/blog`, 
  },
  { 
    TEXT: t('nav.projects'), 
    HREF: `/${lang}/projects`, 
  },
  {
    TEXT: t('nav.cv'),
    HREF: "https://drive.google.com/file/d/19pqHEiFgfk3KVx_rZrWjyfyNAXi1a0jI/view?usp=sharing",
    EXTERNAL: true,
  },
]
---

<header id="header" class="fixed top-0 w-full h-16 z-50 ">
  <Container size="md">
    <div class="relative h-full w-full">
      <div class="absolute left-0 top-1/2 -translate-y-1/2 flex gap-1 font-semibold">
        <a href={`/${lang}/`} class="flex gap-1 text-current hover:text-black dark:hover:text-white transition-colors duration-300 ease-in-out">
          <svg class="size-6 fill-current">
            <use href="/favicon.svg"></use>
          </svg>
          <div>
            {t('site.title')}
          </div>
        </a>
      </div>

    <div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
      <nav class="hidden md:flex items-center justify-center text-sm gap-1">
        {
          LINKS.map((LINK) => (
            <a href={LINK.HREF} target={LINK.EXTERNAL ? "_blank" : ""} class={cn("h-8 rounded-full px-3 text-current", "flex items-center justify-center", "transition-colors duration-300 ease-in-out", pathname === LINK.HREF || "/" + subpath?.[0] === LINK.HREF ? "bg-black dark:bg-white text-white dark:text-black" : "hover:bg-black/5 dark:hover:bg-white/20 hover:text-black dark:hover:text-white")}>
              {LINK.TEXT}
            </a>
          ))
        }
      </nav>
    </div>

    <div class="buttons absolute right-0 top-1/2 -translate-y-1/2 flex gap-1">
      <a href={`/${lang}/search`} aria-label={t('a11y.search')} class={cn("hidden md:flex", "size-9 rounded-full p-2 items-center justify-center", "bg-transparent hover:bg-black/5 dark:hover:bg-white/20", "stroke-current hover:stroke-black hover:dark:stroke-white", "border border-black/10 dark:border-white/25", "transition-colors duration-300 ease-in-out", pathname === `/${lang}/search` || "/" + subpath?.[0] === "search" ? "pointer-events-none bg-black dark:bg-white text-white dark:text-black" : "")}>
        <svg class="size-full">
          <use href="/ui.svg#search"></use>
        </svg>
      </a>

      <button id="header-theme-button" aria-label={t('a11y.theme')} class={cn("hidden md:flex", "size-9 rounded-full p-2 items-center justify-center", "bg-transparent hover:bg-black/5 dark:hover:bg-white/20", "stroke-current hover:stroke-black hover:dark:stroke-white", "border border-black/10 dark:border-white/25", "transition-colors duration-300 ease-in-out")}>
        <svg class="size-full block dark:hidden">
          <use href="/ui.svg#sun"></use>
        </svg>
        <svg class="size-full hidden dark:block">
          <use href="/ui.svg#moon"></use>
        </svg>
      </button>

      <div class="relative" aria-label={t('a11y.language')}>
        <button id="language-button" aria-label="Change language" class={cn("hidden md:flex", "size-9 rounded-full p-1.5 items-center justify-center", "bg-transparent hover:bg-black/5 dark:hover:bg-white/20", "border border-black/10 dark:border-white/25", "transition-colors duration-300 ease-in-out")}>
          <svg class="size-full">
            <use href={`/ui.svg#${languageFlags[lang]}`}></use>
          </svg>
        </button>
        <ul id="language-dropdown" class="hidden absolute right-0 mt-2 py-2 w-40 bg-white dark:bg-neutral-800 rounded-lg shadow-lg border border-black/10 dark:border-white/25 z-50">
          {Object.entries(languages).map(([langCode, label]) => (
            <li>
              <a href={`/${langCode}/${route || ''}`} class={cn(
                "flex items-center px-4 py-2 text-sm hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors",
                langCode === lang ? "font-bold" : ""
              )}>
                <div class="w-5 h-4 mr-2 flex-shrink-0">
                  <svg class="size-full">
                    <use href={`/ui.svg#${languageFlags[langCode]}`}></use>
                  </svg>
                </div>
                <span>{label}</span>
              </a>
            </li>
          ))}
        </ul>
      </div>

      <button id="header-drawer-button" aria-label={t('a11y.drawer')} class={cn("flex md:hidden", "size-9 rounded-full p-2 items-center justify-center", "bg-transparent hover:bg-black/5 dark:hover:bg-white/20", "stroke-current hover:stroke-black hover:dark:stroke-white", "border border-black/10 dark:border-white/25", "transition-colors duration-300 ease-in-out")}>
        <svg id="drawer-open" class="size-full">
          <use href="/ui.svg#menu"></use>
        </svg>
        <svg id="drawer-close" class="size-full">
          <use href="/ui.svg#x"></use>
        </svg>
      </button>
    </div>
  </div>
  </Container>
</header>

<style>
  #header-drawer-button > #drawer-open {
    @apply block;
  }

  #header-drawer-button > #drawer-close {
    @apply hidden;
  }

  #header-drawer-button.open > #drawer-open {
    @apply hidden;
  }

  #header-drawer-button.open > #drawer-close {
    @apply block;
  }
</style>

<script is:inline>
  function toggleDrawer() {
    const drawer = document.getElementById("drawer")
    const drawerButton = document.getElementById("header-drawer-button")
    drawer?.classList.toggle("open")
    drawerButton?.classList.toggle("open")
  }

  function initializeDrawerButton() {
    const drawerButton = document.getElementById("header-drawer-button")
    drawerButton?.addEventListener("click", toggleDrawer)
  }

  // Language dropdown toggle
  function toggleLanguageDropdown() {
    const dropdown = document.getElementById("language-dropdown")
    dropdown?.classList.toggle("hidden")
  }

  function initializeLanguageButton() {
    const languageButton = document.getElementById("language-button")
    languageButton?.addEventListener("click", toggleLanguageDropdown)
    
    // Close dropdown when clicking outside
    document.addEventListener("click", (event) => {
      const dropdown = document.getElementById("language-dropdown")
      const languageButton = document.getElementById("language-button")
      if (!languageButton?.contains(event.target) && !dropdown?.contains(event.target)) {
        dropdown?.classList.add("hidden")
      }
    })
  }

  document.addEventListener("astro:after-swap", () => {
    initializeDrawerButton()
    initializeLanguageButton()
  })
  
  initializeDrawerButton()
  initializeLanguageButton()
</script>
